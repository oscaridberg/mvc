<h2>Kmom 03</h2>

<p>När man ska ge sig på att bygga något mer komplext som kortspelet för detta kursmoment känner jag att det är oerhört viktigt att först planera sin kod innan man börjar skriva den. Det ger en dels en god överblick av vad man behöver utföra, och dels undviker man att måla in sig i ett hörn som blir svårt att ta sig ur. Nu följde jag inte min plan exakt då jag kännde att vissa metoder passade bättre i en annan klass än vad jag ursprungligen hade tänkt, samt att vissa delar inte behövdes för att kortspelet skulle fungera korrekt. Det är väl en aspekt av planeringen som är svår, att just förutse exakt hur ens kod bör vara uppbyggd innan man börjat skriva på den. Ens färdigheter på att planera kommer säkerligen att förbättras med tiden och då blir man bättre på att förutse vad som behövs redan i planeringsstadiet. Jag tror även att man i det långa loppet sparar tid genom att planera koden i förväg. Genom kursmomentets gång har jag inte behövt lägga allt för mycket kraft på att tänka vad nästa steg är i kodskrivandet utan jag har snabbt kunnat referera till min planering för att se vad jag ska göra här näst.</p>

<p>Koden för mitt kortspel har förra kursmomentets kod i grunden och det är mest specifika regler och metoder som behövts läggas till för att få spelet tjugoett till att fungera. Tack vare att jag lade ner extra tid vid det förra momentet att göra min kod återanvändbar så har denna uppgift gått smidigt att lösa. Klassen "TwentyOne" ärver från "Game" klassen och i den har jag lagt till specifika metoder som behövs för reglerna för kortspelet tjugoett. Då jag inte har ändrat på några metoder eller attribut som redan fanns i klasserna så fungerar fortfarande även förra momentets uppgift korrekt, där vi skulle bygga en kortlek. De andra klasserna så som "Player", "Hand", "Deck", och "Card" har även byggts ut med nya metoder som behövs just för spelet tjugoett.</p>

<p>När spelaren väljer att starta spelet skickas den till "/game/twentyone" och möts där av en tom spelplan. Det enda valet som kan göras i början är "Draw Card", knappen för "Stay" finns men den skickar inte vidare spelaren förens minst ett kort har dragits från kortleken. Jag hade kunnat gömt knappen men ville undvika att att hemsidan "hoppar" när knappen sen väl ska visas. Trycker man på "Draw Card" skickas man vidare till "/game/twentyone/draw" och ett korts dras ur kortleken, väljer man att ta ett till kort skickas man till samma sida igen. Väljer man att stanna med de kort som man har skickas man till "/game/twentyone/stay" där bankirer drar sina kort och vinnaren för rundan avgörs. Då koden bara använder sig av en kortlek åt gången tills att den är slut så går det att förutspå vilka kort som kommer här näst, har man dragit många låga kort är chansen stor att nästa kort är av ett högt värde. På så sätt blir det desto enklare att vinna desto mer man spelar det. Hade jag haft tiden över så hade det gått att implementera extrauppgiften som var korträkningen, då grunden för det redan är på plats.</p>

<p>Överlag är jag nöjd med min implementation av spelet och det fungerar väl i den utsträckning som jag har testat det. Det jag hade velat ändra är att spelaren inte skickas vidare när ett val görs utan att istället göra det mer likt hur vi byggde ett intelligenstest i webbläsaren för JavaScript kursen som var i höstas. Där ritades istället sidan om baserat på input utan några omladdningar, sen är frågan hur komplext det skulle vara att implementera i Symfony och om det är en vidare god idé. En ytterligare ändring som är mer realistisk är att jag nog skulle arbetat mer med att ärva mina klasser än att bygga ut dem som redan fanns. I "Player" klassen finns det nu metoder som är specifika för kortspelet tjugoett och kan göra klassen onödigt stor om den skulle användas i ett annat projekt. Det upplevdes däremot som enklare att bygga vidare på klassen än att skapa en ny som ärver "Player" klassen, då mycket av logiken och koden mellan objekten redan var på plats och det blev således lättare att anropa de nya metoderna i de redan existerande objekten. </p>

<p>Nu när man vant sig vid Symfony som ramverk så känns det inte som en sån stor skillnad mot ramverk som vi har stött på i andra kurser. Det går snabbt att komma igång med att bygga mer komplexa saker så som ett kortspel och jag upplever aldrig att ramverket är ivägen för en. Jag har även märkt att ju mer jag har arbetat i olika ramverk så får jag mer kunskap om hur de fungerar och känner mig på så sätt även mer bekväm när man stöter på ett nytt ramverk för första gången. Om jag tänker tillbaka till första gången man skulle använda sig av ett ramverk i webtec kursen så minns jag att jag var till stor del förvirrad över hur allt fungerade och hur det hängde ihop. Jämför jag med mina kunskaper idag om view, controllers, och models är skillnaden stor.</p>

<p>Avslutningsvis så får min TIL vara att jag har fått just en bättre förståelse för olika ramverks struktur. Jag upplever att jag kommit över en tröskel där ramverkens funktionalitet har klickat till allt mer för mig, och hur min kunskap även kan överföras mellan olika ramverk.</p>
